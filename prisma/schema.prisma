generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  country        String?
  city           String?
  zipcode        String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  accounts       Account[]
  reviews        Review[]
  orders         Order[]
  addresses      ShippingAddress[]
  role           Role              @default(CUSTOMER)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  imageUrl     String
  price        Float
  rating       Float
  brand        String
  category     String
  countInStock Int
  createdAt    DateTime    @default(now())
  reviews      Review[]
  orderItems   OrderItem[]
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  itemsPrice    Float
  shippingPrice Float
  taxPrice      Float
  totalPrice    Float
  isDelivered   Boolean     @default(false)
  deliveredAt   DateTime?
  orderItems    OrderItem[]

  userId            String @db.ObjectId
  shippingAddressId String @db.ObjectId

  shippingAddress ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  productId String @db.ObjectId
  orderId   String @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  review    String?
  productId String  @db.ObjectId
  userId    String  @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model ShippingAddress {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  country String
  city    String
  zipcode String
  address String
  userId  String @db.ObjectId

  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

enum Role {
  CUSTOMER
  ADMIN
}
