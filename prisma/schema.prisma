generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  city           String?
  zipcode        String?
  address        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  reviews        Review[]
  orders         Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String
  price       Float
  rating      Float
  createdAt   DateTime    @default(now())
  reviews     Review[]
  orderItems  OrderItem[]
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  productId String @db.ObjectId
  orderId   String @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime    @default(now())
  status    String
  total     Float
  userId    String      @db.ObjectId
  orderItem OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  review    String?
  productId String  @db.ObjectId
  userId    String  @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}
